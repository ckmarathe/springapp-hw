AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: ""
Description: ""

Parameters:
    VPCName:
        Description: The name of the VPC being created. eg. - ProjectName-Environment
        Type: String
    VPCMainCIDR:
        Description: The name of the VPC being created. eg. - 172.16.0.0/16
        Type: String
    EnvName:
        Description: The stack name of the environment. eg. - DEV / UAT / PROD
        Type: String
    PublicSubnetIpBlocks: 
        Description: "Comma-delimited list of three CIDR blocks eg. - 172.16.1.0/24, 172.16.2.0/24, 172.16.3.0/24 (Must 3)"
        Type: CommaDelimitedList
    PrivateSubnetIpBlocks:
        Description: "Comma-delimited list of three CIDR blocks eg. - 172.16.4.0/24, 172.16.5.0/24, 172.16.6.0/24 (Must 3)"
        Type: CommaDelimitedList
    ProjectName:
        Description: The Project name. eg. - ClientName or website name
        Type: String
    InstanceType:
        Description: Bastion Host instance type
        Type: String
        Default: t3.small
        AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
          t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]
        ConstraintDescription: must be a valid EC2 instance type.
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    LatestAmiId:
        Description: Bastion Host Image ID
        Type: String

Mappings:
    AZRegions:
        us-east-1:
            AZs: ["a", "b", "c"]

Conditions:
    CreateSGForDev: !Equals [!Ref EnvName, "DEV"]
    CreateSGForUat: !Equals [!Ref EnvName, "UAT"]
    CreateSGForProd: !Equals [!Ref EnvName, "PROD"]

Resources:

    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: !Ref 'VPCMainCIDR'
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Stack"
                Value: !Ref 'EnvName'
              - 
                Key: "Name"
                Value: !Ref 'VPCName'
    
    PublicSubnet0:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [0, !Ref PublicSubnetIpBlocks]
            MapPublicIpOnLaunch: "true"
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-public-'
                            - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
    
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [1, !Ref PublicSubnetIpBlocks]
            MapPublicIpOnLaunch: "true"
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-public-'
                            - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [2, !Ref PublicSubnetIpBlocks]
            MapPublicIpOnLaunch: "true"
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-public-'
                            - !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

    PrivateSubnet0:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [0, !Ref PrivateSubnetIpBlocks]
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-private-'
                            - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [1, !Ref PrivateSubnetIpBlocks]
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-private-'
                            - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: 
                Fn::Sub:
                    - "${AWS::Region}${AZ}"
                    - AZ: !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
            VpcId: !Ref VPC
            CidrBlock: !Select [2, !Ref PrivateSubnetIpBlocks]
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-private-'
                            - !Select [ 2, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
                -
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-IGW'

    GatewayToInternet:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            VpcId:
                Ref: "VPC"
            InternetGatewayId:
                Ref: "InternetGateway"

    NATEIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
            Tags:    
                -    
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-NAT-EIP'

    NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref PublicSubnet0
            AllocationId: !GetAtt NATEIP.AllocationId
            Tags: 
                -    
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-NATG'

    PublicRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags: 
                -    
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-Public-RT'

    PrivateRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
                -    
                    Key: "Application"
                    Value:
                        Ref: "AWS::StackName"
                -
                    Key: "Stack"
                    Value: !Ref 'EnvName'
                -
                    Key: "Name"
                    Value: !Join
                        - ''
                        -   - !Ref "VPCName"
                            - '-Private-RT'

    PublicRoute:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable

    PrivateRoute:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref NatGateway
            RouteTableId: !Ref PrivateRouteTable

    PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        RouteTableId:
          Ref: "PublicRouteTable"

    PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        RouteTableId:
          Ref: "PublicRouteTable"

    PublicSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet2"
        RouteTableId:
          Ref: "PublicRouteTable"

    PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet0"
        RouteTableId:
          Ref: "PrivateRouteTable"

    PrivateSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet1"
        RouteTableId:
          Ref: "PrivateRouteTable"
        
    PrivateSubnetRouteTableAssociation2:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet2"
        RouteTableId:
          Ref: "PrivateRouteTable"

    PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Application"
            Value:
              Ref: "AWS::StackName"
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "VPCName"
                - '-public-nacl'

    InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    PublicSubnetNetworkAclAssociation1:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    PublicSubnetNetworkAclAssociation2:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet2"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    BastionHost:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref 'InstanceType'
        SecurityGroupIds: 
          - !If [CreateSGForDev, !GetAtt BastionhostSecurityGroupDev.GroupId, !If [CreateSGForUat, !GetAtt BastionhostSecurityGroupUat.GroupId, !If [CreateSGForProd, !GetAtt BastionhostSecurityGroupProd.GroupId, !Ref "AWS::NoValue" ] ] ]
        KeyName: !Ref 'KeyName'
        ImageId: !Ref 'LatestAmiId'
        SubnetId: !Ref 'PublicSubnet0' 
        BlockDeviceMappings: 
          - DeviceName: "/dev/sdm"
            Ebs: 
              DeleteOnTermination: "false"
              VolumeSize: "20"
        Tags:    
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "ProjectName"
                - '-BastionHost-'
                - !Ref "EnvName"

    BastionhostSecurityGroupDev:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateSGForDev
      Properties:
        GroupDescription: Dev SG
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        Tags:    
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "ProjectName"
                - '-BastionHost-'
                - !Ref "EnvName"
                - '-SG'
  
    BastionhostSecurityGroupUat:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateSGForUat
      Properties:
        GroupDescription: Uat SG
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        Tags:    
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "ProjectName"
                - '-BastionHost-'
                - !Ref "EnvName"
                - '-SG'

    BastionhostSecurityGroupProd:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateSGForProd
      Properties:
        GroupDescription: Prod SG
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        Tags:    
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "ProjectName"
                - '-BastionHost-'
                - !Ref "EnvName"
                - '-SG'
    
    BastionHostEIP:
      Type: AWS::EC2::EIP
      Properties:
        InstanceId: !Ref 'BastionHost'
        Tags:    
          -
            Key: "Stack"
            Value: !Ref 'EnvName'
          -
            Key: "Name"
            Value: !Join
              - ''
              - - !Ref "ProjectName"
                - '-BastionHost-'
                - !Ref "EnvName"
                - '-EIP'

Outputs:

    EnvName:
      Description: "Environment of VPC"
      Value:
        Ref: "EnvName"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-ENV"
    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-VPC"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value:
        Ref: "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

    PublicSubnet1:
      Description: "SubnetId of public subnet 1"
      Value:
        Ref: "PublicSubnet1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet1"

    PublicSubnet2:
      Description: "SubnetId of public subnet 2"
      Value:
        Ref: "PublicSubnet2"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet2"

    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"

    PrivateSubnet1:
      Description: "SubnetId of private subnet 1"
      Value:
        Ref: "PrivateSubnet1"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet1"

    PrivateSubnet2:
      Description: "SubnetId of private subnet 2"
      Value:
        Ref: "PrivateSubnet2"
      Export:
        Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet2"

    BastionHostIP:
      Description: "Bastion host IP address"
      Value:
        Ref: "BastionHostEIP"

    BastionHostKey:
      Description: "Bastion host Key"
      Value:
        Ref: "KeyName"